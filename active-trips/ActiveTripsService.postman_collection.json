{
	"info": {
		"_postman_id": "active-trips-service-collection",
		"name": "Active Trips Service API",
		"description": "Collection for testing Active Trips Service endpoints - IslandHop Backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "active-trips-service"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Response contains message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Active trips service is running\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if the active trips service is running"
			},
			"response": []
		},
		{
			"name": "Set Driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Driver email is set\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.driver_email).to.eql(\"driver@example.com\");",
							"});",
							"",
							"pm.test(\"Driver status is 1\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.driver_status).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"tripId\": \"{{test_trip_id}}\",\n    \"email\": \"driver@example.com\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/set_driver",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"set_driver"
					]
				},
				"description": "Set a driver for a specific trip"
			},
			"response": []
		},
		{
			"name": "Set Guide",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Guide email is set\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.guide_email).to.eql(\"guide@example.com\");",
							"});",
							"",
							"pm.test(\"Guide status is 1\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.guide_status).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"tripId\": \"{{test_trip_id}}\",\n    \"email\": \"guide@example.com\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/set_guide",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"set_guide"
					]
				},
				"description": "Set a guide for a specific trip"
			},
			"response": []
		},
		{
			"name": "Remove Driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Driver status is 0\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.driver_status).to.eql(0);",
							"});",
							"",
							"pm.test(\"Driver email is preserved\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.driver_email).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"tripId\": \"{{test_trip_id}}\",\n    \"email\": \"driver@example.com\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/remove_driver",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"remove_driver"
					]
				},
				"description": "Remove a driver from a specific trip (sets status to 0)"
			},
			"response": []
		},
		{
			"name": "Remove Guide",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Guide status is 0\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.guide_status).to.eql(0);",
							"});",
							"",
							"pm.test(\"Guide email is preserved\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.guide_email).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"tripId\": \"{{test_trip_id}}\",\n    \"email\": \"guide@example.com\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/remove_guide",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"remove_guide"
					]
				},
				"description": "Remove a guide from a specific trip (sets status to 0)"
			},
			"response": []
		},
		{
			"name": "Activate Trip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Response contains trip data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.trip).to.exist;",
							"});",
							"",
							"pm.test(\"Response contains assignment status\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('driverAssigned');",
							"    pm.expect(jsonData.data).to.have.property('guideAssigned');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"tripId\": \"{{test_trip_id}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/new_activate_trip",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"new_activate_trip"
					]
				},
				"description": "Activate a trip with automatic driver/guide assignment based on trip requirements"
			},
			"response": []
		},
		{
			"name": "Set Driver - Missing tripId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has success false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Error message mentions required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"required\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"driver@example.com\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/set_driver",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"set_driver"
					]
				},
				"description": "Test validation - missing tripId should return 400"
			},
			"response": []
		},
		{
			"name": "Set Driver - Invalid tripId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has success false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Error message mentions trip not found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"tripId\": \"invalid-trip-id-12345\",\n    \"email\": \"driver@example.com\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/set_driver",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"set_driver"
					]
				},
				"description": "Test with invalid tripId - should return 404"
			},
			"response": []
		},
		{
			"name": "Get Trips by User ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Response contains trips data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.exist;",
							"    pm.expect(jsonData.data.userId).to.exist;",
							"    pm.expect(jsonData.data.trips).to.be.an('array');",
							"    pm.expect(jsonData.data.totalTrips).to.be.a('number');",
							"});",
							"",
							"pm.test(\"UserId matches request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.userId).to.eql(pm.globals.get('test_user_id') || 'J0INIUkpCDNpUHCUkY0xmyPwoEe2');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/trips/user/{{test_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"trips",
						"user",
						"{{test_user_id}}"
					]
				},
				"description": "Get all trips for a specific user by their userId"
			},
			"response": []
		},
		{
			"name": "Get Trips by User ID - Invalid User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Response indicates no trips found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.trips).to.be.an('array').that.is.empty;",
							"    pm.expect(jsonData.data.totalTrips).to.eql(0);",
							"});",
							"",
							"pm.test(\"Message indicates no trips found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"No trips found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/trips/user/invalid-user-id-12345",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"trips",
						"user",
						"invalid-user-id-12345"
					]
				},
				"description": "Test with invalid userId - should return empty trips array"
			},
			"response": []
		},
		{
			"name": "Get Trips by Driver Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Response contains trips data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.exist;",
							"    pm.expect(jsonData.data.driverEmail).to.exist;",
							"    pm.expect(jsonData.data.trips).to.be.an('array');",
							"    pm.expect(jsonData.data.totalTrips).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Driver email matches request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.driverEmail).to.eql(pm.globals.get('test_driver_email') || 'driver1@example.com');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/trips/driver/{{test_driver_email}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"trips",
						"driver",
						"{{test_driver_email}}"
					]
				},
				"description": "Get all trips for a specific driver by their email"
			},
			"response": []
		},
		{
			"name": "Get Trips by Driver Email - Invalid Driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Response indicates no trips found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.trips).to.be.an('array').that.is.empty;",
							"    pm.expect(jsonData.data.totalTrips).to.eql(0);",
							"});",
							"",
							"pm.test(\"Message indicates no trips found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"No trips found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/trips/driver/invalid-driver@example.com",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"trips",
						"driver",
						"invalid-driver@example.com"
					]
				},
				"description": "Test with invalid driver email - should return empty trips array"
			},
			"response": []
		},
		{
			"name": "Invalid Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has success false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Error message mentions route not found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/invalid-endpoint",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"invalid-endpoint"
					]
				},
				"description": "Test 404 handler for invalid endpoints"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5006",
			"type": "string",
			"description": "Base URL for the Active Trips Service"
		},
		{
			"key": "test_trip_id",
			"value": "042cea55-afae-4c2e-9d19-e3c40490579b",
			"type": "string",
			"description": "Test trip ID for testing endpoints (replace with actual trip ID from your database)"
		},
		{
			"key": "test_user_id",
			"value": "J0INIUkpCDNpUHCUkY0xmyPwoEe2",
			"type": "string",
			"description": "Test user ID for testing user-specific endpoints (replace with actual user ID from your database)"
		},
		{
			"key": "test_driver_email",
			"value": "driver1@example.com",
			"type": "string",
			"description": "Test driver email for testing driver-specific endpoints (replace with actual driver email from your database)"
		}
	]
}
